{"version":3,"file":"static/js/309.c494c463.chunk.js","mappings":"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","sources":["../node_modules/focus-trap-react/dist/focus-trap-react.js","../node_modules/tabbable/src/index.js","../node_modules/focus-trap/index.js"],"sourcesContent":["\"use strict\";\n\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nvar _exec$, _exec;\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nvar React = require('react');\nvar _require = require('focus-trap'),\n  createFocusTrap = _require.createFocusTrap;\nvar _require2 = require('tabbable'),\n  isFocusable = _require2.isFocusable;\n\n/**\n * The major version of React currently running.\n * @type {number}\n */\nvar reactVerMajor = parseInt((_exec$ = (_exec = /^(\\d+)\\./.exec(React.version)) === null || _exec === void 0 ? void 0 : _exec[1]) !== null && _exec$ !== void 0 ? _exec$ : 0, 10);\n\n/**\n * @type {import('../index.d.ts').FocusTrap}\n */\nvar FocusTrap = /*#__PURE__*/function (_React$Component) {\n  function FocusTrap(props) {\n    var _this;\n    _classCallCheck(this, FocusTrap);\n    _this = _callSuper(this, FocusTrap, [props]);\n    /**\n     * Gets the node for the given option, which is expected to be an option that\n     *  can be either a DOM node, a string that is a selector to get a node, `false`\n     *  (if a node is explicitly NOT given), or a function that returns any of these\n     *  values.\n     * @param {string} optionName\n     * @returns {undefined | false | HTMLElement | SVGElement} Returns\n     *  `undefined` if the option is not specified; `false` if the option\n     *  resolved to `false` (node explicitly not given); otherwise, the resolved\n     *  DOM node.\n     * @throws {Error} If the option is set, not `false`, and is not, or does not\n     *  resolve to a node.\n     */\n    _defineProperty(_this, \"getNodeForOption\", function (optionName) {\n      var _this$internalOptions;\n      // use internal options first, falling back to original options\n      var optionValue = (_this$internalOptions = this.internalOptions[optionName]) !== null && _this$internalOptions !== void 0 ? _this$internalOptions : this.originalOptions[optionName];\n      if (typeof optionValue === 'function') {\n        for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          params[_key - 1] = arguments[_key];\n        }\n        optionValue = optionValue.apply(void 0, params);\n      }\n      if (optionValue === true) {\n        optionValue = undefined; // use default value\n      }\n      if (!optionValue) {\n        if (optionValue === undefined || optionValue === false) {\n          return optionValue;\n        }\n        // else, empty string (invalid), null (invalid), 0 (invalid)\n\n        throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n      }\n      var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n      if (typeof optionValue === 'string') {\n        var _this$getDocument;\n        node = (_this$getDocument = this.getDocument()) === null || _this$getDocument === void 0 ? void 0 : _this$getDocument.querySelector(optionValue); // resolve to node, or null if fails\n        if (!node) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n      }\n      return node;\n    });\n    _this.handleDeactivate = _this.handleDeactivate.bind(_this);\n    _this.handlePostDeactivate = _this.handlePostDeactivate.bind(_this);\n    _this.handleClickOutsideDeactivates = _this.handleClickOutsideDeactivates.bind(_this);\n\n    // focus-trap options used internally when creating the trap\n    _this.internalOptions = {\n      // We need to hijack the returnFocusOnDeactivate option,\n      // because React can move focus into the element before we arrived at\n      // this lifecycle hook (e.g. with autoFocus inputs). So the component\n      // captures the previouslyFocusedElement in componentWillMount,\n      // then (optionally) returns focus to it in componentWillUnmount.\n      returnFocusOnDeactivate: false,\n      // the rest of these are also related to deactivation of the trap, and we\n      //  need to use them and control them as well\n      checkCanReturnFocus: null,\n      onDeactivate: _this.handleDeactivate,\n      onPostDeactivate: _this.handlePostDeactivate,\n      // we need to special-case this setting as well so that we can know if we should\n      //  NOT return focus if the trap gets auto-deactivated as the result of an\n      //  outside click (otherwise, we'll always think we should return focus because\n      //  of how we manage that flag internally here)\n      clickOutsideDeactivates: _this.handleClickOutsideDeactivates\n    };\n\n    // original options provided by the consumer\n    _this.originalOptions = {\n      // because of the above `internalOptions`, we maintain our own flag for\n      //  this option, and default it to `true` because that's focus-trap's default\n      returnFocusOnDeactivate: true,\n      // because of the above `internalOptions`, we keep these separate since\n      //  they're part of the deactivation process which we configure (internally) to\n      //  be shared between focus-trap and focus-trap-react\n      onDeactivate: null,\n      onPostDeactivate: null,\n      checkCanReturnFocus: null,\n      // the user's setting, defaulted to false since focus-trap defaults this to false\n      clickOutsideDeactivates: false\n    };\n    var focusTrapOptions = props.focusTrapOptions;\n    for (var optionName in focusTrapOptions) {\n      if (!Object.prototype.hasOwnProperty.call(focusTrapOptions, optionName)) {\n        continue;\n      }\n      if (optionName === 'returnFocusOnDeactivate' || optionName === 'onDeactivate' || optionName === 'onPostDeactivate' || optionName === 'checkCanReturnFocus' || optionName === 'clickOutsideDeactivates') {\n        _this.originalOptions[optionName] = focusTrapOptions[optionName];\n        continue; // exclude from internalOptions\n      }\n      _this.internalOptions[optionName] = focusTrapOptions[optionName];\n    }\n\n    // if set, `{ target: Node, allowDeactivation: boolean }` where `target` is the outside\n    //  node that was clicked, and `allowDeactivation` is the result of the consumer's\n    //  option (stored in `this.originalOptions.clickOutsideDeactivates`, which may be a\n    //  function) whether to allow or deny auto-deactivation on click on this outside node\n    _this.outsideClick = null;\n\n    // elements from which to create the focus trap on mount; if a child is used\n    //  instead of the `containerElements` prop, we'll get the child's related\n    //  element when the trap renders and then is declared 'mounted'\n    _this.focusTrapElements = props.containerElements || [];\n\n    // now we remember what the currently focused element is, not relying on focus-trap\n    _this.updatePreviousElement();\n    return _this;\n  }\n\n  /**\n   * Gets the configured document.\n   * @returns {Document|undefined} Configured document, falling back to the main\n   *  document, if it exists. During SSR, `undefined` is returned since the\n   *  document doesn't exist.\n   */\n  _inherits(FocusTrap, _React$Component);\n  return _createClass(FocusTrap, [{\n    key: \"getDocument\",\n    value: function getDocument() {\n      // SSR: careful to check if `document` exists before accessing it as a variable\n      return this.props.focusTrapOptions.document || (typeof document !== 'undefined' ? document : undefined);\n    }\n  }, {\n    key: \"getReturnFocusNode\",\n    value: function getReturnFocusNode() {\n      var node = this.getNodeForOption('setReturnFocus', this.previouslyFocusedElement);\n      return node ? node : node === false ? false : this.previouslyFocusedElement;\n    }\n\n    /** Update the previously focused element with the currently focused element. */\n  }, {\n    key: \"updatePreviousElement\",\n    value: function updatePreviousElement() {\n      var currentDocument = this.getDocument();\n      if (currentDocument) {\n        this.previouslyFocusedElement = currentDocument.activeElement;\n      }\n    }\n  }, {\n    key: \"deactivateTrap\",\n    value: function deactivateTrap() {\n      // NOTE: it's possible the focus trap has already been deactivated without our knowing it,\n      //  especially if the user set the `clickOutsideDeactivates: true` option on the trap,\n      //  and the mouse was clicked on some element outside the trap; at that point, focus-trap\n      //  will initiate its auto-deactivation process, which will call our own\n      //  handleDeactivate(), which will call into this method\n      if (!this.focusTrap || !this.focusTrap.active) {\n        return;\n      }\n      this.focusTrap.deactivate({\n        // NOTE: we never let the trap return the focus since we do that ourselves\n        returnFocus: false,\n        // we'll call this in our own post deactivate handler so make sure the trap doesn't\n        //  do it prematurely\n        checkCanReturnFocus: null,\n        // let it call the user's original deactivate handler, if any, instead of\n        //  our own which calls back into this function\n        onDeactivate: this.originalOptions.onDeactivate\n        // NOTE: for post deactivate, don't specify anything so that it calls the\n        //  onPostDeactivate handler specified on `this.internalOptions`\n        //  which will always be our own `handlePostDeactivate()` handler, which\n        //  will finish things off by calling the user's provided onPostDeactivate\n        //  handler, if any, at the right time\n        // onPostDeactivate: NOTHING\n      });\n    }\n  }, {\n    key: \"handleClickOutsideDeactivates\",\n    value: function handleClickOutsideDeactivates(event) {\n      // use consumer's option (or call their handler) as the permission or denial\n      var allowDeactivation = typeof this.originalOptions.clickOutsideDeactivates === 'function' ? this.originalOptions.clickOutsideDeactivates.call(null, event) // call out of context\n      : this.originalOptions.clickOutsideDeactivates; // boolean\n\n      if (allowDeactivation) {\n        // capture the outside target that was clicked so we can use it in the deactivation\n        //  process since the consumer allowed it to cause auto-deactivation\n        this.outsideClick = {\n          target: event.target,\n          allowDeactivation: allowDeactivation\n        };\n      }\n      return allowDeactivation;\n    }\n  }, {\n    key: \"handleDeactivate\",\n    value: function handleDeactivate() {\n      if (this.originalOptions.onDeactivate) {\n        this.originalOptions.onDeactivate.call(null); // call user's handler out of context\n      }\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"handlePostDeactivate\",\n    value: function handlePostDeactivate() {\n      var _this2 = this;\n      var finishDeactivation = function finishDeactivation() {\n        var returnFocusNode = _this2.getReturnFocusNode();\n        var canReturnFocus = !!(\n        // did the consumer allow it?\n\n        _this2.originalOptions.returnFocusOnDeactivate && // can we actually focus the node?\n        returnFocusNode !== null && returnFocusNode !== void 0 && returnFocusNode.focus && (\n        // was there an outside click that allowed deactivation?\n        !_this2.outsideClick ||\n        // did the consumer allow deactivation when the outside node was clicked?\n        _this2.outsideClick.allowDeactivation &&\n        // is the outside node NOT focusable (implying that it did NOT receive focus\n        //  as a result of the click-through) -- in which case do NOT restore focus\n        //  to `returnFocusNode` because focus should remain on the outside node\n        !isFocusable(_this2.outsideClick.target, _this2.internalOptions.tabbableOptions))\n\n        // if no, the restore focus to `returnFocusNode` at this point\n        );\n        var _this2$internalOption = _this2.internalOptions.preventScroll,\n          preventScroll = _this2$internalOption === void 0 ? false : _this2$internalOption;\n        if (canReturnFocus) {\n          // return focus to the element that had focus when the trap was activated\n          returnFocusNode.focus({\n            preventScroll: preventScroll\n          });\n        }\n        if (_this2.originalOptions.onPostDeactivate) {\n          _this2.originalOptions.onPostDeactivate.call(null); // don't call it in context of \"this\"\n        }\n        _this2.outsideClick = null; // reset: no longer needed\n      };\n      if (this.originalOptions.checkCanReturnFocus) {\n        this.originalOptions.checkCanReturnFocus.call(null, this.getReturnFocusNode()) // call out of context\n        .then(finishDeactivation, finishDeactivation);\n      } else {\n        finishDeactivation();\n      }\n    }\n  }, {\n    key: \"setupFocusTrap\",\n    value: function setupFocusTrap() {\n      if (this.focusTrap) {\n        // trap already exists: it's possible we're in StrictMode and we're being remounted,\n        //  in which case, we will have deactivated the trap when we got unmounted (remember,\n        //  StrictMode, in development, purposely unmounts and remounts components after\n        //  mounting them the first time to make sure they have reusable state,\n        //  @see https://reactjs.org/docs/strict-mode.html#ensuring-reusable-state) so now\n        //  we need to restore the state of the trap according to our component state\n        // NOTE: Strict mode __violates__ assumptions about the `componentWillUnmount()` API\n        //  which clearly states -- even for React 18 -- that, \"Once a component instance is\n        //  unmounted, __it will never be mounted again.__\" (emphasis ours). So when we get\n        //  unmounted, we assume we're gone forever and we deactivate the trap. But then\n        //  we get remounted and we're supposed to restore state. But if you had paused,\n        //  we've now deactivated (we don't know we're amount to get remounted again)\n        //  which means we need to reactivate and then pause. Otherwise, do nothing.\n        if (this.props.active && !this.focusTrap.active) {\n          this.focusTrap.activate();\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      } else {\n        var nodesExist = this.focusTrapElements.some(Boolean);\n        if (nodesExist) {\n          this.focusTrap = this.props._createFocusTrap(this.focusTrapElements, this.internalOptions);\n          if (this.props.active) {\n            this.focusTrap.activate();\n          }\n          if (this.props.paused) {\n            this.focusTrap.pause();\n          }\n        }\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.active) {\n        this.setupFocusTrap();\n      }\n      // else, wait for later activation in case the `focusTrapOptions` will be updated\n      //  again before the trap is activated (e.g. if waiting to know what the document\n      //  object will be, so the Trap must be rendered, but the consumer is waiting to\n      //  activate until they have obtained the document from a ref)\n      //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      if (this.focusTrap) {\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrap.updateContainerElements(this.props.containerElements);\n        }\n        var hasActivated = !prevProps.active && this.props.active;\n        var hasDeactivated = prevProps.active && !this.props.active;\n        var hasPaused = !prevProps.paused && this.props.paused;\n        var hasUnpaused = prevProps.paused && !this.props.paused;\n        if (hasActivated) {\n          this.updatePreviousElement();\n          this.focusTrap.activate();\n        }\n        if (hasDeactivated) {\n          this.deactivateTrap();\n          return; // un/pause does nothing on an inactive trap\n        }\n        if (hasPaused) {\n          this.focusTrap.pause();\n        }\n        if (hasUnpaused) {\n          this.focusTrap.unpause();\n        }\n      } else {\n        // NOTE: if we're in `componentDidUpdate` and we don't have a trap yet,\n        //  it either means it shouldn't be active, or it should be but none of\n        //  of given `containerElements` were present in the DOM the last time\n        //  we tried to create the trap\n\n        if (prevProps.containerElements !== this.props.containerElements) {\n          this.focusTrapElements = this.props.containerElements;\n        }\n\n        // don't create the trap unless it should be active in case the consumer\n        //  is still updating `focusTrapOptions`\n        //  @see https://github.com/focus-trap/focus-trap-react/issues/539\n        if (this.props.active) {\n          this.updatePreviousElement();\n          this.setupFocusTrap();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.deactivateTrap();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n      var child = this.props.children ? React.Children.only(this.props.children) : undefined;\n      if (child) {\n        if (child.type && child.type === React.Fragment) {\n          throw new Error('A focus-trap cannot use a Fragment as its child container. Try replacing it with a <div> element.');\n        }\n        var callbackRef = function callbackRef(element) {\n          var containerElements = _this3.props.containerElements;\n          if (child) {\n            // React 19 moved the `ref` to an official prop\n            if (reactVerMajor >= 19) {\n              if (typeof child.props.ref === 'function') {\n                child.props.ref(element);\n              } else if (child.props.ref) {\n                child.props.ref.current = element;\n              }\n            } else {\n              // older versions of React had the `ref` separate from props (still works in R19\n              //  but results in a deprecation warning in Dev builds)\n              if (typeof child.ref === 'function') {\n                child.ref(element);\n              } else if (child.ref) {\n                child.ref.current = element;\n              }\n            }\n          }\n          _this3.focusTrapElements = containerElements ? containerElements : [element];\n        };\n        var childWithRef = React.cloneElement(child, {\n          ref: callbackRef\n        });\n        return childWithRef;\n      }\n      return null;\n    }\n  }]);\n}(React.Component); // NOTE: While React 19 REMOVED support for `propTypes`, support for `defaultProps`\n//  __for class components ONLY__ remains: \"Class components will continue to support\n//  defaultProps since there is no ES6 alternative.\"\n//  @see https://react.dev/blog/2024/04/25/react-19-upgrade-guide#removed-proptypes-and-defaultprops\nFocusTrap.defaultProps = {\n  active: true,\n  paused: false,\n  focusTrapOptions: {},\n  _createFocusTrap: createFocusTrap\n};\n\n// 🔺 DEPRECATED: default export\nmodule.exports = FocusTrap;\n\n// named export\nmodule.exports.FocusTrap = FocusTrap;","// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nconst candidateSelectors = [\n  'input:not([inert])',\n  'select:not([inert])',\n  'textarea:not([inert])',\n  'a[href]:not([inert])',\n  'button:not([inert])',\n  '[tabindex]:not(slot):not([inert])',\n  'audio[controls]:not([inert])',\n  'video[controls]:not([inert])',\n  '[contenteditable]:not([contenteditable=\"false\"]):not([inert])',\n  'details>summary:first-of-type:not([inert])',\n  'details:not([inert])',\n];\nconst candidateSelector = /* #__PURE__ */ candidateSelectors.join(',');\n\nconst NoElement = typeof Element === 'undefined';\n\nconst matches = NoElement\n  ? function () {}\n  : Element.prototype.matches ||\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n\nconst getRootNode =\n  !NoElement && Element.prototype.getRootNode\n    ? (element) => element?.getRootNode?.()\n    : (element) => element?.ownerDocument;\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nconst isInert = function (node, lookUp = true) {\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  const inertAtt = node?.getAttribute?.('inert');\n  const inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  const result = inert || (lookUp && node && isInert(node.parentNode)); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nconst isContentEditable = function (node) {\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  const attValue = node?.getAttribute?.('contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nconst getCandidates = function (el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n\n  let candidates = Array.prototype.slice.apply(\n    el.querySelectorAll(candidateSelector)\n  );\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nconst getCandidatesIteratively = function (\n  elements,\n  includeContainer,\n  options\n) {\n  const candidates = [];\n  const elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    const element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      const assigned = element.assignedElements();\n      const content = assigned.length ? assigned : element.children;\n      const nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push(...nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates,\n        });\n      }\n    } else {\n      // check candidate element\n      const validCandidate = matches.call(element, candidateSelector);\n      if (\n        validCandidate &&\n        options.filter(element) &&\n        (includeContainer || !elements.includes(element))\n      ) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      const shadowRoot =\n        element.shadowRoot ||\n        // check for an undisclosed shadow\n        (typeof options.getShadowRoot === 'function' &&\n          options.getShadowRoot(element));\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      const validShadowRoot =\n        !isInert(shadowRoot, false) &&\n        (!options.shadowRootFilter || options.shadowRootFilter(element));\n\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        const nestedCandidates = getCandidatesIteratively(\n          shadowRoot === true ? element.children : shadowRoot.children,\n          true,\n          options\n        );\n\n        if (options.flatten) {\n          candidates.push(...nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: nestedCandidates,\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift(...element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nconst hasTabIndex = function (node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nconst getTabIndex = function (node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if (\n      (/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) ||\n        isContentEditable(node)) &&\n      !hasTabIndex(node)\n    ) {\n      return 0;\n    }\n  }\n\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nconst getSortOrderTabIndex = function (node, isScope) {\n  const tabIndex = getTabIndex(node);\n\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n\n  return tabIndex;\n};\n\nconst sortOrderedTabbables = function (a, b) {\n  return a.tabIndex === b.tabIndex\n    ? a.documentOrder - b.documentOrder\n    : a.tabIndex - b.tabIndex;\n};\n\nconst isInput = function (node) {\n  return node.tagName === 'INPUT';\n};\n\nconst isHiddenInput = function (node) {\n  return isInput(node) && node.type === 'hidden';\n};\n\nconst isDetailsWithSummary = function (node) {\n  const r =\n    node.tagName === 'DETAILS' &&\n    Array.prototype.slice\n      .apply(node.children)\n      .some((child) => child.tagName === 'SUMMARY');\n  return r;\n};\n\nconst getCheckedRadio = function (nodes, form) {\n  for (let i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\n\nconst isTabbableRadio = function (node) {\n  if (!node.name) {\n    return true;\n  }\n  const radioScope = node.form || getRootNode(node);\n  const queryRadios = function (name) {\n    return radioScope.querySelectorAll(\n      'input[type=\"radio\"][name=\"' + name + '\"]'\n    );\n  };\n\n  let radioSet;\n  if (\n    typeof window !== 'undefined' &&\n    typeof window.CSS !== 'undefined' &&\n    typeof window.CSS.escape === 'function'\n  ) {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error(\n        'Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s',\n        err.message\n      );\n      return false;\n    }\n  }\n\n  const checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\n\nconst isRadio = function (node) {\n  return isInput(node) && node.type === 'radio';\n};\n\nconst isNonTabbableRadio = function (node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nconst isNodeAttached = function (node) {\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  let nodeRoot = node && getRootNode(node);\n  let nodeRootHost = nodeRoot?.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  let attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    attached = !!(\n      nodeRootHost?.ownerDocument?.contains(nodeRootHost) ||\n      node?.ownerDocument?.contains(node)\n    );\n\n    while (!attached && nodeRootHost) {\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = nodeRoot?.host;\n      attached = !!nodeRootHost?.ownerDocument?.contains(nodeRootHost);\n    }\n  }\n\n  return attached;\n};\n\nconst isZeroArea = function (node) {\n  const { width, height } = node.getBoundingClientRect();\n  return width === 0 && height === 0;\n};\nconst isHidden = function (node, { displayCheck, getShadowRoot }) {\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n\n  const isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  const nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n\n  if (\n    !displayCheck ||\n    displayCheck === 'full' ||\n    displayCheck === 'legacy-full'\n  ) {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      const originalNode = node;\n      while (node) {\n        const parentElement = node.parentElement;\n        const rootNode = getRootNode(node);\n        if (\n          parentElement &&\n          !parentElement.shadowRoot &&\n          getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nconst isDisabledFromFieldset = function (node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    let parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (let i = 0; i < parentNode.children.length; i++) {\n          const child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *')\n              ? true\n              : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\n\nconst isNodeMatchingSelectorFocusable = function (options, node) {\n  if (\n    node.disabled ||\n    // we must do an inert look up to filter out any elements inside an inert ancestor\n    //  because we're limited in the type of selectors we can use in JSDom (see related\n    //  note related to `candidateSelectors`)\n    isInert(node) ||\n    isHiddenInput(node) ||\n    isHidden(node, options) ||\n    // For a details element with a summary, the summary element gets the focus\n    isDetailsWithSummary(node) ||\n    isDisabledFromFieldset(node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isNodeMatchingSelectorTabbable = function (options, node) {\n  if (\n    isNonTabbableRadio(node) ||\n    getTabIndex(node) < 0 ||\n    !isNodeMatchingSelectorFocusable(options, node)\n  ) {\n    return false;\n  }\n  return true;\n};\n\nconst isValidShadowRootTabbable = function (shadowHostNode) {\n  const tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nconst sortByOrder = function (candidates) {\n  const regularTabbables = [];\n  const orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    const isScope = !!item.scopeParent;\n    const element = isScope ? item.scopeParent : item;\n    const candidateTabindex = getSortOrderTabIndex(element, isScope);\n    const elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope\n        ? regularTabbables.push(...elements)\n        : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements,\n      });\n    }\n  });\n\n  return orderedTabbables\n    .sort(sortOrderedTabbables)\n    .reduce((acc, sortable) => {\n      sortable.isScope\n        ? acc.push(...sortable.content)\n        : acc.push(sortable.content);\n      return acc;\n    }, [])\n    .concat(regularTabbables);\n};\n\nconst tabbable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorTabbable.bind(null, options),\n        flatten: false,\n        getShadowRoot: options.getShadowRoot,\n        shadowRootFilter: isValidShadowRootTabbable,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorTabbable.bind(null, options)\n    );\n  }\n  return sortByOrder(candidates);\n};\n\nconst focusable = function (container, options) {\n  options = options || {};\n\n  let candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively(\n      [container],\n      options.includeContainer,\n      {\n        filter: isNodeMatchingSelectorFocusable.bind(null, options),\n        flatten: true,\n        getShadowRoot: options.getShadowRoot,\n      }\n    );\n  } else {\n    candidates = getCandidates(\n      container,\n      options.includeContainer,\n      isNodeMatchingSelectorFocusable.bind(null, options)\n    );\n  }\n\n  return candidates;\n};\n\nconst isTabbable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\n\nconst focusableCandidateSelector = /* #__PURE__ */ candidateSelectors\n  .concat('iframe')\n  .join(',');\n\nconst isFocusable = function (node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { tabbable, focusable, isTabbable, isFocusable, getTabIndex };\n","import {\n  tabbable,\n  focusable,\n  isFocusable,\n  isTabbable,\n  getTabIndex,\n} from 'tabbable';\n\nconst activeFocusTraps = {\n  activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      const activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap._setPausedState(true);\n      }\n    }\n\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n\n  deactivateTrap(trapStack, trap) {\n    const trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n\n    if (\n      trapStack.length > 0 &&\n      !trapStack[trapStack.length - 1]._isManuallyPaused()\n    ) {\n      trapStack[trapStack.length - 1]._setPausedState(false);\n    }\n  },\n};\n\nconst isSelectableInput = function (node) {\n  return (\n    node.tagName &&\n    node.tagName.toLowerCase() === 'input' &&\n    typeof node.select === 'function'\n  );\n};\n\nconst isEscapeEvent = function (e) {\n  return e?.key === 'Escape' || e?.key === 'Esc' || e?.keyCode === 27;\n};\n\nconst isTabEvent = function (e) {\n  return e?.key === 'Tab' || e?.keyCode === 9;\n};\n\n// checks for TAB by default\nconst isKeyForward = function (e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nconst isKeyBackward = function (e) {\n  return isTabEvent(e) && e.shiftKey;\n};\n\nconst delay = function (fn) {\n  return setTimeout(fn, 0);\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nconst valueOrHandler = function (value, ...params) {\n  return typeof value === 'function' ? value(...params) : value;\n};\n\nconst getActualTarget = function (event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function'\n    ? event.composedPath()[0]\n    : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nconst internalTrapStack = [];\n\nconst createFocusTrap = function (elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  const doc = userOptions?.document || document;\n\n  const trapStack = userOptions?.trapStack || internalTrapStack;\n\n  const config = {\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward,\n    isKeyBackward,\n    ...userOptions,\n  };\n\n  const state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [], // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    manuallyPaused: false,\n\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined,\n  };\n\n  let trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  const getOption = (configOverrideOptions, optionName, configOptionName) => {\n    return configOverrideOptions &&\n      configOverrideOptions[optionName] !== undefined\n      ? configOverrideOptions[optionName]\n      : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  const findContainerIndex = function (element, event) {\n    const composedPath =\n      typeof event?.composedPath === 'function'\n        ? event.composedPath()\n        : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(\n      ({ container, tabbableNodes }) =>\n        container.contains(element) ||\n        // fall back to explicit tabbable search which will take into consideration any\n        //  web components if the `tabbableOptions.getShadowRoot` option was used for\n        //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n        //  look inside web components even if open)\n        composedPath?.includes(container) ||\n        tabbableNodes.find((node) => node === element)\n    );\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @param {Object} options\n   * @param {boolean} [options.hasFallback] True if the option could be a selector string\n   *  and the option allows for a fallback scenario in the case where the selector is\n   *  valid but does not match a node (i.e. the queried node doesn't exist in the DOM).\n   * @param {Array} [options.params] Params to pass to the option if it's a function.\n   * @returns {undefined | null | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `null` if the option didn't resolve\n   *  to a node but `options.hasFallback=true`, `false` if the option resolved to `false`\n   *  (node explicitly not given); otherwise, the resolved DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node, unless the option is a selector string and `options.hasFallback=true`.\n   */\n  const getNodeForOption = function (\n    optionName,\n    { hasFallback = false, params = [] } = {}\n  ) {\n    let optionValue = config[optionName];\n\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue(...params);\n    }\n\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\n        `\\`${optionName}\\` was specified but was not a node, or did not return a node`\n      );\n    }\n\n    let node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      try {\n        node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      } catch (err) {\n        throw new Error(\n          `\\`${optionName}\\` appears to be an invalid selector; error=\"${err.message}\"`\n        );\n      }\n\n      if (!node) {\n        if (!hasFallback) {\n          throw new Error(\n            `\\`${optionName}\\` as selector refers to no known node`\n          );\n        }\n        // else, `node` MUST be `null` because that's what `Document.querySelector()` returns\n        //  if the selector is valid but doesn't match anything\n      }\n    }\n\n    return node;\n  };\n\n  const getInitialFocusNode = function () {\n    let node = getNodeForOption('initialFocus', { hasFallback: true });\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n\n    if (\n      node === undefined ||\n      (node && !isFocusable(node, config.tabbableOptions))\n    ) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        const firstTabbableGroup = state.tabbableGroups[0];\n        const firstTabbableNode =\n          firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    } else if (node === null) {\n      // option is a VALID selector string that doesn't yield a node: use the `fallbackFocus`\n      //  option instead of the default behavior when the option isn't specified at all\n      node = getNodeForOption('fallbackFocus');\n    }\n\n    if (!node) {\n      throw new Error(\n        'Your focus-trap needs to have at least one focusable element'\n      );\n    }\n\n    return node;\n  };\n\n  const updateTabbableNodes = function () {\n    state.containerGroups = state.containers.map((container) => {\n      const tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      const focusableNodes = focusable(container, config.tabbableOptions);\n\n      const firstTabbableNode =\n        tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      const lastTabbableNode =\n        tabbableNodes.length > 0\n          ? tabbableNodes[tabbableNodes.length - 1]\n          : undefined;\n\n      const firstDomTabbableNode = focusableNodes.find((node) =>\n        isTabbable(node)\n      );\n      const lastDomTabbableNode = focusableNodes\n        .slice()\n        .reverse()\n        .find((node) => isTabbable(node));\n\n      const posTabIndexesFound = !!tabbableNodes.find(\n        (node) => getTabIndex(node) > 0\n      );\n\n      return {\n        container,\n        tabbableNodes,\n        focusableNodes,\n\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound,\n\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode,\n\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode,\n\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode(node, forward = true) {\n          const nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes\n                .slice(focusableNodes.indexOf(node) + 1)\n                .find((el) => isTabbable(el));\n            }\n\n            return focusableNodes\n              .slice(0, focusableNodes.indexOf(node))\n              .reverse()\n              .find((el) => isTabbable(el));\n          }\n\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        },\n      };\n    });\n\n    state.tabbableGroups = state.containerGroups.filter(\n      (group) => group.tabbableNodes.length > 0\n    );\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (\n      state.tabbableGroups.length <= 0 &&\n      !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error(\n        'Your focus-trap must have at least one container with at least one tabbable node in it at all times'\n      );\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (\n      state.containerGroups.find((g) => g.posTabIndexesFound) &&\n      state.containerGroups.length > 1\n    ) {\n      throw new Error(\n        \"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\"\n      );\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  const getActiveElement = function (el) {\n    const activeElement = el.activeElement;\n\n    if (!activeElement) {\n      return;\n    }\n\n    if (\n      activeElement.shadowRoot &&\n      activeElement.shadowRoot.activeElement !== null\n    ) {\n      return getActiveElement(activeElement.shadowRoot);\n    }\n\n    return activeElement;\n  };\n\n  const tryFocus = function (node) {\n    if (node === false) {\n      return;\n    }\n\n    if (node === getActiveElement(document)) {\n      return;\n    }\n\n    if (!node || !node.focus) {\n      tryFocus(getInitialFocusNode());\n      return;\n    }\n\n    node.focus({ preventScroll: !!config.preventScroll });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n\n  const getReturnFocusNode = function (previousActiveElement) {\n    const node = getNodeForOption('setReturnFocus', {\n      params: [previousActiveElement],\n    });\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  const findNextNavNode = function ({ target, event, isBackward = false }) {\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n\n    let destinationNode = null;\n\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      const containerIndex = findContainerIndex(target, event);\n      const containerGroup =\n        containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode =\n            state.tabbableGroups[state.tabbableGroups.length - 1]\n              .lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        let startOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ firstTabbableNode }) => target === firstTabbableNode\n        );\n\n        if (\n          startOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target, false)))\n        ) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          const destinationGroupIndex =\n            startOfGroupIndex === 0\n              ? state.tabbableGroups.length - 1\n              : startOfGroupIndex - 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.lastTabbableNode\n              : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        let lastOfGroupIndex = state.tabbableGroups.findIndex(\n          ({ lastTabbableNode }) => target === lastTabbableNode\n        );\n\n        if (\n          lastOfGroupIndex < 0 &&\n          (containerGroup.container === target ||\n            (isFocusable(target, config.tabbableOptions) &&\n              !isTabbable(target, config.tabbableOptions) &&\n              !containerGroup.nextTabbableNode(target)))\n        ) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          const destinationGroupIndex =\n            lastOfGroupIndex === state.tabbableGroups.length - 1\n              ? 0\n              : lastOfGroupIndex + 1;\n\n          const destinationGroup = state.tabbableGroups[destinationGroupIndex];\n\n          destinationNode =\n            getTabIndex(target) >= 0\n              ? destinationGroup.firstTabbableNode\n              : destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  const checkPointerDown = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate,\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  const checkFocusIn = function (event) {\n    const target = getActualTarget(event);\n    const targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      let nextNode; // next node to focus, if we find one\n      let navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          const mruContainerIdx = findContainerIndex(\n            state.mostRecentlyFocusedNode\n          );\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          const { tabbableNodes } = state.containerGroups[mruContainerIdx];\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            const mruTabIdx = tabbableNodes.findIndex(\n              (node) => node === state.mostRecentlyFocusedNode\n            );\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (\n            !state.containerGroups.some((g) =>\n              g.tabbableNodes.some((n) => getTabIndex(n) > 0)\n            )\n          ) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent),\n        });\n      }\n\n      if (nextNode) {\n        tryFocus(nextNode);\n      } else {\n        tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  const checkKeyNav = function (event, isBackward = false) {\n    state.recentNavEvent = event;\n\n    const destinationNode = findNextNavNode({ event, isBackward });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n\n  const checkTabKey = function (event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  const checkEscapeKey = function (event) {\n    if (\n      isEscapeEvent(event) &&\n      valueOrHandler(config.escapeDeactivates, event) !== false\n    ) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n\n  const checkClick = function (e) {\n    const target = getActualTarget(e);\n\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  const addListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus\n      ? delay(function () {\n          tryFocus(getInitialFocusNode());\n        })\n      : tryFocus(getInitialFocusNode());\n\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false,\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n\n    return trap;\n  };\n\n  const removeListeners = function () {\n    if (!state.active) {\n      return;\n    }\n\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  const checkDomRemoval = function (mutations) {\n    const isFocusedNodeRemoved = mutations.some(function (mutation) {\n      const removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  const mutationObserver =\n    typeof window !== 'undefined' && 'MutationObserver' in window\n      ? new MutationObserver(checkDomRemoval)\n      : undefined;\n\n  const updateObservedNodes = function () {\n    if (!mutationObserver) {\n      return;\n    }\n\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true,\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n\n    get paused() {\n      return state.paused;\n    },\n\n    activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n\n      const onActivate = getOption(activateOptions, 'onActivate');\n      const onPostActivate = getOption(activateOptions, 'onPostActivate');\n      const checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = getActiveElement(doc);\n\n      onActivate?.();\n\n      const finishActivation = () => {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate?.();\n      };\n\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(\n          finishActivation,\n          finishActivation\n        );\n        return this;\n      }\n\n      finishActivation();\n      return this;\n    },\n\n    deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      const options = {\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus,\n        ...deactivateOptions,\n      };\n\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n\n      const onDeactivate = getOption(options, 'onDeactivate');\n      const onPostDeactivate = getOption(options, 'onPostDeactivate');\n      const checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      const returnFocus = getOption(\n        options,\n        'returnFocus',\n        'returnFocusOnDeactivate'\n      );\n\n      onDeactivate?.();\n\n      const finishDeactivation = () => {\n        delay(() => {\n          if (returnFocus) {\n            tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate?.();\n        });\n      };\n\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(\n          getReturnFocusNode(state.nodeFocusedBeforeActivation)\n        ).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n\n      finishDeactivation();\n      return this;\n    },\n\n    pause(pauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      state.manuallyPaused = true;\n\n      return this._setPausedState(true, pauseOptions);\n    },\n\n    unpause(unpauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n\n      state.manuallyPaused = false;\n\n      if (trapStack[trapStack.length - 1] !== this) {\n        return this;\n      }\n\n      return this._setPausedState(false, unpauseOptions);\n    },\n\n    updateContainerElements(containerElements) {\n      const elementsAsArray = [].concat(containerElements).filter(Boolean);\n\n      state.containers = elementsAsArray.map((element) =>\n        typeof element === 'string' ? doc.querySelector(element) : element\n      );\n\n      if (state.active) {\n        updateTabbableNodes();\n      }\n\n      updateObservedNodes();\n\n      return this;\n    },\n  };\n\n  Object.defineProperties(trap, {\n    _isManuallyPaused: {\n      value() {\n        return state.manuallyPaused;\n      },\n    },\n    _setPausedState: {\n      value(paused, options) {\n        if (state.paused === paused) {\n          return this;\n        }\n\n        state.paused = paused;\n        if (paused) {\n          const onPause = getOption(options, 'onPause');\n          const onPostPause = getOption(options, 'onPostPause');\n          onPause?.();\n\n          removeListeners();\n          updateObservedNodes();\n\n          onPostPause?.();\n        } else {\n          const onUnpause = getOption(options, 'onUnpause');\n          const onPostUnpause = getOption(options, 'onPostUnpause');\n\n          onUnpause?.();\n\n          updateTabbableNodes();\n          addListeners();\n          updateObservedNodes();\n\n          onPostUnpause?.();\n        }\n\n        return this;\n      },\n    },\n  });\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n\n  return trap;\n};\n\nexport { createFocusTrap };\n"],"names":["_typeof","o","Symbol","iterator","constructor","prototype","_exec$","_exec","_defineProperties","e","r","t","length","enumerable","configurable","writable","Object","defineProperty","_toPropertyKey","key","_callSuper","_getPrototypeOf","TypeError","ReferenceError","_assertThisInitialized","_possibleConstructorReturn","_isNativeReflectConstruct","Reflect","construct","apply","Boolean","valueOf","call","setPrototypeOf","getPrototypeOf","bind","__proto__","_setPrototypeOf","i","toPrimitive","String","Number","_toPrimitive","React","require","createFocusTrap","isFocusable","reactVerMajor","parseInt","exec","version","FocusTrap","_React$Component","props","_this","a","n","_classCallCheck","this","optionName","_this$internalOptions","optionValue","internalOptions","originalOptions","_len","arguments","params","Array","_key","undefined","Error","concat","_this$getDocument","node","getDocument","querySelector","value","handleDeactivate","handlePostDeactivate","handleClickOutsideDeactivates","returnFocusOnDeactivate","checkCanReturnFocus","onDeactivate","onPostDeactivate","clickOutsideDeactivates","focusTrapOptions","hasOwnProperty","outsideClick","focusTrapElements","containerElements","updatePreviousElement","create","_inherits","document","getNodeForOption","previouslyFocusedElement","currentDocument","activeElement","focusTrap","active","deactivate","returnFocus","event","allowDeactivation","target","deactivateTrap","_this2","finishDeactivation","returnFocusNode","getReturnFocusNode","canReturnFocus","focus","tabbableOptions","_this2$internalOption","preventScroll","then","activate","paused","pause","some","_createFocusTrap","setupFocusTrap","prevProps","updateContainerElements","hasActivated","hasDeactivated","hasPaused","hasUnpaused","unpause","_this3","child","children","Children","only","type","Fragment","cloneElement","ref","element","current","Component","defaultProps","module","exports","candidateSelectors","candidateSelector","join","NoElement","Element","matches","msMatchesSelector","webkitMatchesSelector","getRootNode","_element$getRootNode","ownerDocument","isInert","lookUp","_node$getAttribute","inertAtt","getAttribute","parentNode","getCandidates","el","includeContainer","filter","candidates","slice","querySelectorAll","unshift","getCandidatesIteratively","elements","options","elementsToCheck","from","shift","tagName","assigned","assignedElements","nestedCandidates","flatten","push","scopeParent","includes","shadowRoot","getShadowRoot","validShadowRoot","shadowRootFilter","_nestedCandidates","hasTabIndex","isNaN","getTabIndex","tabIndex","test","_node$getAttribute2","attValue","isContentEditable","sortOrderedTabbables","b","documentOrder","isInput","isNonTabbableRadio","isRadio","name","radioSet","radioScope","form","queryRadios","window","CSS","escape","err","console","error","message","checked","nodes","getCheckedRadio","isTabbableRadio","isZeroArea","_node$getBoundingClie","getBoundingClientRect","width","height","isHidden","_ref","displayCheck","getComputedStyle","visibility","nodeUnderDetails","parentElement","originalNode","rootNode","assignedSlot","host","_nodeRoot","_nodeRootHost","_nodeRootHost$ownerDo","_node$ownerDocument","nodeRoot","nodeRootHost","attached","contains","_nodeRoot2","_nodeRootHost2","_nodeRootHost2$ownerD","isNodeAttached","getClientRects","isNodeMatchingSelectorFocusable","disabled","isHiddenInput","isDetailsWithSummary","item","isDisabledFromFieldset","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","shadowHostNode","sortByOrder","regularTabbables","orderedTabbables","forEach","isScope","candidateTabindex","getSortOrderTabIndex","content","sort","reduce","acc","sortable","tabbable","container","focusable","isTabbable","focusableCandidateSelector","activeFocusTraps","trapStack","trap","activeTrap","_setPausedState","trapIndex","indexOf","splice","_isManuallyPaused","isTabEvent","keyCode","isKeyForward","shiftKey","isKeyBackward","delay","fn","setTimeout","valueOrHandler","getActualTarget","composedPath","internalTrapStack","userOptions","doc","config","_objectSpread2","escapeDeactivates","delayInitialFocus","state","containers","containerGroups","tabbableGroups","nodeFocusedBeforeActivation","mostRecentlyFocusedNode","manuallyPaused","delayInitialFocusTimer","recentNavEvent","getOption","configOverrideOptions","configOptionName","findContainerIndex","findIndex","tabbableNodes","find","_ref2","_ref2$hasFallback","hasFallback","_ref2$params","_toConsumableArray","getInitialFocusNode","firstTabbableGroup","firstTabbableNode","updateTabbableNodes","map","focusableNodes","lastTabbableNode","firstDomTabbableNode","lastDomTabbableNode","reverse","posTabIndexesFound","nextTabbableNode","forward","nodeIdx","group","g","_getActiveElement","_tryFocus","toLowerCase","select","isSelectableInput","previousActiveElement","findNextNavNode","_ref3","_ref3$isBackward","isBackward","destinationNode","containerIndex","containerGroup","startOfGroupIndex","_ref4","destinationGroupIndex","destinationGroup","lastOfGroupIndex","_ref5","_destinationGroupIndex","_destinationGroup","checkPointerDown","allowOutsideClick","preventDefault","checkFocusIn","targetContained","Document","nextNode","stopImmediatePropagation","navAcrossContainers","mruContainerIdx","mruTabIdx","checkTabKey","checkKeyNav","checkEscapeKey","checkClick","addListeners","addEventListener","capture","passive","removeListeners","removeEventListener","mutationObserver","MutationObserver","mutations","mutation","removedNodes","updateObservedNodes","disconnect","observe","subtree","childList","activateOptions","onActivate","onPostActivate","checkCanFocusTrap","finishActivation","deactivateOptions","clearTimeout","pauseOptions","unpauseOptions","elementsAsArray","defineProperties","onPause","onPostPause","onUnpause","onPostUnpause"],"sourceRoot":""}